.\"
.\" Bindle Binaries Tools
.\" Copyright (C) 2022 David M. Syzdek <david@syzdek.net>.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are
.\" met:
.\"
.\"    * Redistributions of source code must retain the above copyright
.\"      notice, this list of conditions and the following disclaimer.
.\"    * Redistributions in binary form must reproduce the above copyright
.\"      notice, this list of conditions and the following disclaimer in the
.\"      documentation and/or other materials provided with the distribution.
.\"    * Neither the name of David M. Syzdek nor the
.\"      names of its contributors may be used to endorse or promote products
.\"      derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
.\" IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
.\" THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL DAVID M. SYZDEK BE LIABLE FOR
.\" ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.TH "BINDLE_ARRAY" "3" "@RELEASE_MONTH@" "@PACKAGE_NAME@" "Library Functions Manual"
.SH NAME
bindle_badd, bindle_bsearch, bindle_bremove, bindle_bindex - Bindle Binary Tools sorted array routines

.SH LIBRARY
Bindle Binaries Tools (libbindle, -lbindle)

.SH SYNOPSIS
.nf
\fB#include\fR \fB<bindle.h>\fR
.sp
.BI "ssize_t bindle_badd( void * " obj ", void ** " basep ", size_t * " nelp ","
.BI "           size_t " width ", unsigned " opts ","
.BI "           int (*" compar ")(const void *, const void *),"
.BI "           void (*" freeobj ")(void *),"
.BI "           void * (*" reallocbase ")(void *, size_t) );"
.sp
.BI "void * bindle_bremove( const void * " key ", void * " base ", size_t * " nelp ","
.BI "           size_t " width ", unsigned " opts ","
.BI "           int (*" compar ")(const void *, const void *) );"
.sp
.BI "ssize_t bindle_bindex( const void * " key ", const void * " base ", size_t " nel ","
.BI "           size_t " width ", unsigned " opts ", size_t * " wouldbep ","
.BI "           int (*" compar ")(const void *, const void *) );"
.sp
.BI "void * bindle_bsearch( const void * " key ", void * " base ", size_t " nel ","
.BI "           size_t " width ", unsigned " opts ","
.BI "           int (*" compar ")(const void *, const void *) );"

.SH DESCRIPTION
\fBbindle_badd\fR(), \fBbindle_bremove\fR(), \fBbindle_bindex\fR(), and
\fBbindle_bsearch\fR() manipulate sorted arrays of objects. The size of each
object is specified by \fIwidth\fR.  The objects in the array \fIbase\fR or
*\fIbasep\fR are sorted in ascending order according to a comparison function
pointed to by \fIcompar\fR. \fBbindle_bremove\fR(), \fBbindle_bindex\fR(), and
\fBbindle_bsearch\fR() pass \fIkey\fR as the first argument to \fIcompar\fR.
.sp
\fBbindle_badd\fR() will add \fIobj\fR to a sorted array of *\fInelp\fR
objects. If \fIreallocbase\fR is not NULL, \fBbindle_badd\fR() will resize of
the memory referenced by \fIbasep\fR  and update \fIbasep\fR with the new
memory address. Upon success, the value referenced by \fInelp\fR is
incremented.
.sp
\fIopts\fR defines the behavior when the sorted array contains duplicate
objects. \fIopts\fR may only contain one of the following flags used by
\fBbindle_badd\fR():
.RS 6
.TP 15
.B BNDL_BINSERT
inserts object into sorted array and does not allow duplicate objects.
.TP 15
.B BNDL_BREPLACE
inserts object into sorted array, replacing duplicate object if one exists. If
\fIfreeobj\fR is not NULL, \fIfreeobj\fR will be called with a reference to
the duplicate object as the argument.
.TP 15
.B BNDL_BMERGE
inserts object into sorted array according to \fBBNDL_BDUPLAST\fR,
\fBBNDL_BDUPFIRST\fR, or \fBBNDL_BDUPANY\fR.
.RE
.PP
The following \fIopts\fR flags define the order of duplicate objects.
.RS 6
.TP 15
.B BNDL_BDUPFIRST
adds object as first duplicate object or returns first duplicate object.
.TP 15
.B BNDL_BDUPLAST
adds object as last duplicate object or returns last duplicate object.
.TP 15
.B BNDL_BDUPANY
adds or returns duplicate object in any order.
.RE
.PP
\fBbindle_bremove\fR() removes an object matching \fIkey\fR from the sorted
array at \fIbase\fR.  If a matching object was found and removed, the value
referenced by \fInelp\fR is decremented. \fBbindle_bremove\fR() returns a
pointer to the end of the sorted array which will be overwritten by subsequent
calls to \fBbindle_badd\fR().
.sp
\fBbindle_bindex\fR() returns the position of an object matching \fIkey\fR.
If \fIwouldbep\fR is not NULL, the referenced value will be updated with the
position of the matching object within the array. If \fIwouldbep\fR is not NULL
and a matching object is not contained within the array, the referenced value
will be updated with what the position of a matching object would be if it were
added to the sorted array.
.sp
The \fBbindle_bsearch\fR() searches a sorted array for an object which matches
\fIkey\fR. If the sorted array does not contain duplicate matches, then
\fBbindle_bsearch\fR() behaves the same as \fBbsearch\fR().  If the sorted
array does contain duplicate matches, then behavior of \fBbindle_bsearch\fR()
is defined by the value passed to \fIopts\fR.

.SH RETURN VALUES
Upon success, \fBbindle_badd\fR() returns the index position of the object
added to the array, otherwise -2 is returned if a memory error occured or -1
is returned for all other errors.
.sp
\fBbindle_bremove\fR returns a pointer to the removed object if successful,
otherwise NULL is returned.
.sp
\fBbindle_bindex\fR() returns -1 if a matching object was not found, otherwise
the index position of the requested object is returned.
.sp
\fBbindle_bsearch\fR() returns \fINULL\fR if an error occurs, otherwise a
pointer to the object is returned.

.SH EXAMPLE
The example below adds data to a sorted list using \fBbindle_badd\fR();
searches the sorted list using \fBbindle_bindex\fR(), \fBbindle_search\fR(),
and \fBbsearch\fR(); and removes objects from the list using
\fBbindle_bremove\fR().
.nf

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <bindle.h>

struct wc {
    unsigned value;
    char *   name;
} wcs[] = {
    { 0xFFFFFF, "white"   }, { 0xC0C0C0, "silver"  },
    { 0x808080, "gray"    }, { 0x000000, "black"   },
    { 0xFF0000, "red"     }, { 0x800000, "maroon"  },
    { 0xFFFF00, "yellow"  }, { 0x808000, "olive"   },
    { 0x00FF00, "lime"    }, { 0x008000, "green"   },
    { 0x00FFFF, "aqua"    }, { 0x008080, "teal"    },
    { 0x0000FF, "blue"    }, { 0x000080, "navy"    },
    { 0xFF00FF, "fuchsia" }, { 0x800080, "purple"  },
    { 0x321123, "test"    }, { 0x123321, "test"    }
};

#define nr_wcs (sizeof(wcs) / sizeof(wcs[0]))

static int
compobj(const void *c1, const void *c2)
{
    const struct wc * wc1 = *((const struct wc **)c1);
    const struct wc * wc2 = *((const struct wc **)c2);
    return strcasecmp(wc1->name, wc2->name);
}

static int
compkey(const void *keyp, const void *objp)
{
    const char *     key = (const char *)keyp;
    const struct wc * obj = *((const struct wc **)objp);
    return strcasecmp(key, obj->name);
}

int main(int argc, char * argv[])
{
    int         i;
    unsigned    opts;
    size_t      pos, nel, width, wouldbe;
    ssize_t     rc, idx;
    struct wc   **list, *obj, **res;

    nel   = 0;
    list  = NULL;
    opts  = BNDL_BMERGE | BNDL_BDUPANY;
    width = sizeof(struct wc *);

    for(pos = 0; (pos < nr_wcs); pos++)
    {
        obj = &wcs[pos];
        rc = bindle_badd(&obj, (void **)&list, &nel, width, opts,
                         compobj, NULL, realloc);
        if (rc == -1)
        {
            fprintf(stderr, "error adding %s to list\\n", wcs[pos].name);
            free(list);
            exit(EXIT_FAILURE);
        };
    };

    for (i = 1; i < argc; i++)
    {
        idx = bindle_bindex(argv[i], list, nel, width, opts, &wouldbe,
              compkey);
        printf("bindle_bindex():  '%s': ", argv[i]);
        if (idx == -1)
            printf("list position would be %zu\\n", wouldbe);
        else
            printf("list position  %zi\\n", idx);

        res = bindle_bsearch(argv[i], list, nel, width, opts, compkey);
        printf("bindle_bsearch(): '%s': ", argv[i]);
        if (res == NULL)
            printf("unknown color\\n");
        else
            printf("color value #%06x\\n", (*res)->value);

        res = bsearch(argv[i], list, nel, width, compkey);
        printf("bsearch():        '%s': ", argv[i]);
        if (res == NULL)
            printf("unknown color\\n");
        else
            printf("color value #%06x\\n", (*res)->value);
    };

    for(pos = 0; (pos < nr_wcs); pos++)
    {
        res = bindle_bremove(wcs[pos].name, list, &nel, width, opts,
                             compkey);
        if (res == NULL)
        {
            fprintf(stderr, "error removing %s from list\\n",
                    wcs[pos].name);
            free(list);
            exit(EXIT_FAILURE);
        };
    };

    free(list);

    exit(EXIT_SUCCESS);
}
.fi

.SH SEE ALSO
.BR bindle_array (3),
.BR bsearch (3)

.SH AUTHOR
David M. Syzdek <david@syzdek.net>

.SH ACKNOWLEDGEMENTS
\fB@PACKAGE_NAME@\fR is developed and maintained by David M. Syzdek
<david@syzdek.net>.

.\" end of man page
